package com.pregnant.health.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.pregnant.health.model.Catalog;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CATALOG".
*/
public class CatalogDao extends AbstractDao<Catalog, Long> {

    public static final String TABLENAME = "CATALOG";

    /**
     * Properties of entity Catalog.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Code = new Property(2, String.class, "code", false, "CODE");
        public final static Property Caption = new Property(3, String.class, "caption", false, "CAPTION");
        public final static Property DefaultValue = new Property(4, String.class, "defaultValue", false, "DEFAULT_VALUE");
        public final static Property TableName = new Property(5, String.class, "tableName", false, "TABLE_NAME");
        public final static Property FieldName = new Property(6, String.class, "fieldName", false, "FIELD_NAME");
        public final static Property Remark = new Property(7, String.class, "remark", false, "REMARK");
        public final static Property AddTime = new Property(8, String.class, "addTime", false, "ADD_TIME");
        public final static Property UpdateTime = new Property(9, String.class, "updateTime", false, "UPDATE_TIME");
        public final static Property Children = new Property(10, String.class, "children", false, "CHILDREN");
    };


    public CatalogDao(DaoConfig config) {
        super(config);
    }
    
    public CatalogDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CATALOG\" (" + //
                "\"ID\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"CODE\" TEXT," + // 2: code
                "\"CAPTION\" TEXT," + // 3: caption
                "\"DEFAULT_VALUE\" TEXT," + // 4: defaultValue
                "\"TABLE_NAME\" TEXT," + // 5: tableName
                "\"FIELD_NAME\" TEXT," + // 6: fieldName
                "\"REMARK\" TEXT," + // 7: remark
                "\"ADD_TIME\" TEXT," + // 8: addTime
                "\"UPDATE_TIME\" TEXT," + // 9: updateTime
                "\"CHILDREN\" TEXT);"); // 10: children
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CATALOG\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Catalog entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(3, code);
        }
 
        String caption = entity.getCaption();
        if (caption != null) {
            stmt.bindString(4, caption);
        }
 
        String defaultValue = entity.getDefaultValue();
        if (defaultValue != null) {
            stmt.bindString(5, defaultValue);
        }
 
        String tableName = entity.getTableName();
        if (tableName != null) {
            stmt.bindString(6, tableName);
        }
 
        String fieldName = entity.getFieldName();
        if (fieldName != null) {
            stmt.bindString(7, fieldName);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(8, remark);
        }
 
        String addTime = entity.getAddTime();
        if (addTime != null) {
            stmt.bindString(9, addTime);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(10, updateTime);
        }
 
        String children = entity.getChildren();
        if (children != null) {
            stmt.bindString(11, children);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Catalog readEntity(Cursor cursor, int offset) {
        Catalog entity = new Catalog( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // code
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // caption
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // defaultValue
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // tableName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // fieldName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // remark
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // addTime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // updateTime
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // children
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Catalog entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCaption(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDefaultValue(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTableName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFieldName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRemark(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAddTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUpdateTime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setChildren(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Catalog entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Catalog entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
